class Solution {
  public:
    vector<int> topKSumPairs(vector<int>& a, vector<int>& b, int k) {
        // sort both array decending order
        sort(a.begin(), a.end(), greater<int>());
        sort(b.begin(), b.end(), greater<int>());
        priority_queue<tuple<int,int, int>>maxHeap;//create maxHeap{sum, aidx,bidx}
        set<pair<int,int>>visited;//set to keep track visited idx
        maxHeap.push({a[0] + b[0],0,0});
        visited.insert({0,0});
        vector<int>ans;//vector store the result
        //extract top k elements from the heap
        while(k-- && !maxHeap.empty()){
            auto[sum, i, j] = maxHeap.top();
            maxHeap.pop();
            ans.push_back(sum);
            //now push which is not visited 
            if(i+1 < a.size() && !visited.count({i+1,j})){
                maxHeap.push({a[i+1]+ b[j], i+1, j});
                visited.insert({i+1,j});
            }
            if(j+1 < b.size() && !visited.count({i,j+1})){
                maxHeap.push({a[i]+ b[j+1], i, j+1});
                visited.insert({i,j+1});
            }
        }
        
        return ans;
    }
};